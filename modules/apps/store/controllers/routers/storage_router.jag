<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */

/*
 Description: The controller is used to serve files that are stored in the StorageManager
 Filename: storage_router.jag
 */

 /*
 Constant variables used to designate Header parameters
 */
var HEADER_CONTENT_TYPE = 'Content-Type';
var HEADER_CONTENT_LENGTH = 'Content-Length';

var ERROR_NOT_FOUND = 'The requested resource was not found.';
var ERROR_AUTH_REQ = "You must be logged in to access this resource";

var log = new Log('storage.router');

var constants = require('rxt').constants;
var carbon = require('carbon');

var tenantId = constants.DEFAULT_TENANT;

var uriMatcher = new URIMatcher(request.getRequestURI());

var storageModule = require('/modules/data/storage.js').storageModule();

var tenantedStorageEndpoint = constants.STORAGE_TENANT_URL_PATTERN;
    //'/{context}/t/{domain}/storage/{type}/{id}/{uuid}/{fileName}';
var storageEndpoint = constants.STORAGE_URL_PATTERN;
    //'/{context}/storage/{type}/{id}/{uuid}/{fileName}';
var isTenanted = uriMatcher.match(tenantedStorageEndpoint);

if (isTenanted) {
    var matchedElements = uriMatcher.elements();
    tenantId = obtainTenantIdByRequest(matchedElements);
}

var store = require('/modules/store.js').storeManagers(request, session, tenantId);

var storageSecurityProvider = store.storageSecurityProvider;

var storageManager = new storageModule.StorageManager({
    context: 'storage',
    isCached: false,
    connectionInfo: {
        dataSource: 'JAGH2'
    }
});

var value = {};

//Obtain the tenantId and the uuid from the url

var isMatch = uriMatcher.match(storageEndpoint);

//Handle the request only if the url matches
if (isMatch || isTenanted) {
    var matchedElements = uriMatcher.elements();
    handleResourceRequest(matchedElements);
}
else {
    response.sendError(404, ERROR_NOT_FOUND);
}

/*
 The function services the requests for a resource by using the matched elements
 @matchedElements: A list of elements extracted from the url
 */
function handleResourceRequest(matchedElements) {
    var key = matchedElements['uuid'];
    var compoundKey = key + '/' + matchedElements['fileName'];
    var type = matchedElements['type'];
    var id = matchedElements['id'];

    //log.debug(compoundKey);
    var isAllowed = storageSecurityProvider.execute(type, id, compoundKey, session);

    //log.debug(isAllowed);

    if (!isAllowed) {
        response.sendError(401, ERROR_AUTH_REQ);
        return isAllowed;
        //return;
    }

    var storedValue = storageManager.get(key);

    //Check if a value was returned from storage
    if (!storedValue) {
        response.sendError(404, ERROR_NOT_FOUND);
    }
    else {

        //Get the image details
        var contentType = storedValue.contentType;
        var contentLength = storedValue.contentLength;

        //Create the headers
        response.addHeader(HEADER_CONTENT_TYPE, contentType);
        response.addHeader(HEADER_CONTENT_LENGTH, contentLength + '');

        //Send the file stream
        try {
            print(storedValue.content);
        } catch (e) {

        }
    }
}

function obtainTenantIdByRequest(matchedElements) {

    return carbon.server.tenantId({domain: matchedElements.domain});
}

%>
